import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StarEnigma {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // @([A-Za-z]+)(?:.*?):(\d+)(?:[^@!-:>]*)!(A|D)!(?:[^@!-:>]*)->(\d+)

        List<String> attackedPlanet = new ArrayList<>();
        List<String> destroyedPlanet = new ArrayList<>();

        int n = Integer.parseInt(scanner.nextLine());

        Pattern pattern = Pattern.compile("[star]", Pattern.CASE_INSENSITIVE);

        while (n-- > 0){
            
            String encrypedMsg = scanner.nextLine();

            Matcher matcher = pattern.matcher(encrypedMsg);
            
            int countLetters = 0;
            while (matcher.find()){
                countLetters++;
            }

            String decryptedMsg = "";
            for (int i = 0; i < encrypedMsg.length(); i++) {
                decryptedMsg += String.valueOf(Character.toChars(encrypedMsg.charAt(i) - countLetters));
            }
            Pattern patternPlanets = Pattern.compile("@([A-Za-z]+)(?:[^@!\\-:>]*):(\\d+)(?:[^@!\\-:>]*)!(A|D)!(?:[^@!\\-:>]*)->(\\d+)");

            Matcher matcherPlanets = patternPlanets.matcher(decryptedMsg);

            while (matcherPlanets.find()){
                String planetName = matcherPlanets.group(1);
                String attackType = matcherPlanets.group(3);
                if (attackType.equals("A")){
                    attackedPlanet.add(planetName);
                }else {
                    destroyedPlanet.add(planetName);
                }
            }
        }
        System.out.println(String.format("Attacked planets: %d",attackedPlanet.size()));
        attackedPlanet.stream().sorted((e1,e2) -> e1.compareTo(e2)).forEach(e -> {
            System.out.println(String.format("-> %s",e));
        });

        System.out.println(String.format("Destroyed planets: %d",destroyedPlanet.size()));
        destroyedPlanet.stream().sorted((e1,e2) -> e1.compareTo(e2)).forEach(e -> {
            System.out.println(String.format("-> %s",e));
        });
    }
}
